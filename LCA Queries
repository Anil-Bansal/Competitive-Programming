//O(logN)

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;


typedef tree<int, null_type, less<int>, rb_tree_tag,
        tree_order_statistics_node_update>
        new_data_set;


#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define PSET(x,y) fixed<<setprecision(y)<<x
#define pb push_back
#define pii pair<int,int>
#define pf push_front
#define mp make_pair
#define vi vector<int>
#define vip vector<pair<int,int> >
#define ff first
#define ss second
#define int long long
#define mod 1000000007
#define BIG 998244353
#define s(t) scanf("%lld",&t)
#define p(t) printf("%lld\n",t)
#define mii map<int,int>
#define MSET(table,i) memset(table, i, sizeof(table))
#define endl '\n'
#define tc int t;cin>>t;while(t--)
#define pi  3.1415926358
#define bits(x) __builtin_popcount(x)
#define minimum(a,n) min_element(a,a+n)-a
#define maximum(a,n) max_element(a,a+n)-a
#define pqbig priority_queue<int>
#define pqsmall priority_queue<int,vector<int>,greater<int> >
#define all(v) v.begin(),v.end()
#define sitr set<int>:: iterator
#define spitr set<pii>:: iterator
#define mitr map<int,int>:: iterator


#define trace1(x)                cerr<<#x<<": "<<x<<endl
#define trace2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define trace3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define trace4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define trace5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define trace6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl

const int N = 1e5 + 5;
vi adj[N];
int parent[N][20];
int depth[N];
int n;

void dfs(int node,int prev)
{
    depth[node]=depth[prev]+1;
    parent[node][0]=prev;
    for(int i=0;i<adj[node].size();++i)
    {
        int el=adj[node][i];
        if(el==prev)
            continue;
        dfs(el,node);
    }
}

void precompute()
{
    for(int i=1;i<18;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(parent[j][i-1]!=-1)
                parent[j][i]=parent[parent[j][i-1]][i-1];
        }
    }
}

int lca(int x,int y)
{
    if(depth[x]>depth[y])
        swap(x,y);

    int diff=depth[y]-depth[x];

    for(int i=0;i<20;i++)
    {
        if((1ll<<i)&diff)
            y=parent[y][i];
    }

    for(int i=18;i>=0;--i)
    {
        if(parent[x][i]!=parent[y][i])
        {
            x=parent[x][i];
            y=parent[y][i];
        }
    }

    return parent[x][0];
}

int32_t main()
{
    fast;
    cin>>n;
    MSET(parent,-1);
    for(int i=1;i<n;i++)
    {
        int x,y;cin>>x>>y;
        adj[x].pb(y);
        adj[y].pb(x);
    }

    dfs(1,0);
    precompute();

    int q;cin>>q;
    while(q--)
    {
        int x,y;cin>>x>>y;
        cout<<lca(x,y)<<endl;
    }
}
